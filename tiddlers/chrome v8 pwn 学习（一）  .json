[
    {
        "created": "20250803100618978",
        "creator": "LittFlower",
        "title": "chrome v8 pwn 学习（一）  ",
        "text": "## 简介\n\n> V8 是一个由 Google 开发的开源 JavaScript 引擎，用于 Google Chrome 及 Chromium 中，项目以V8发动机其命名。此项目由Lars Bak主导开发。\n> ——摘自维基百科\n\nJavaScript 是解释语言，需要先翻译成字节码后在 VM 上运行。V8 中实现了一个 VM。出于性能考虑，目前的引擎普遍采用一种叫做 Just-in-time (JIT) 的编译技术，V8 也是。JIT 的思想在于，如果一段代码反复执行，那么将其编译成机器代码运行，会比每次都解释要快得多。\n\nv8 这个引擎编译出来的二进制文件为 d8，我们 Pwner 攻击的主要目标一般就是这个。\n\nv8 的开源仓库在[这里](https://chromium.googlesource.com/v8/v8/)\n\n## 环境搭建\n\n### 最新版本\n\n首先，由于需要大量在 google 的网站和 github 上下载代码，所以需要配置好代理，这里略过不表。\n\n随后，先安装 depot_tools，arch linux 可以使用 aur 仓库里打包好的软件包，其他发行版可能需要 clone 项目[仓库](https://chromium.googlesource.com/chromium/tools/depot_tools.git)。这个工具包是用来管理 v8 代码的。\n\n然后安装 ninja，arch linux 的 extra 仓库里有这个包，直接下就行，其他发行版可以自己 [clone](https://github.com/ninja-build/ninja.git) 编译。\n\n\n然后编译 v8 代码即可，v8 的编译结果可以有两种，release 或者 debug 版本，我们一般使用 debug 版本方便调试。\n\n```bash\n$ fetch v8 && cd v8&& gclient sync\n$ tools/dev/v8gen.py x64.debug\n$ ninja -C out.gn/x64.debug\n```\n\n最终的可执行文件就在 out.gn 目录下。\n\n\n### 配置题目环境\n\n上面的方法一般只能编译最新版本的 v8 代码，而平常遇到的题目使用的可能是某个特殊的 commit，这就需要我们更灵活的配置环境。\n\n回到 v8 目录，一般题目都会给出特殊的 commit id 和一个 diff 文件，所以，需要先把源码的版本 reset 到和题目一样的版本，然后再应用题目的 diff 文件：\n\n```bash\n$ git reset --hard <your_commit_id>\n$ gclient sync\n$ git apply < test.diff\n```\n\n然后重新编译即可：\n\n```bash\n$ tools/dev/v8gen.py x64.debug\n$ ninja -C out.gn/x64.debug\n```\n\n### 报错修复\n\n2025 年了，大部分的软件包依赖的都是 python3，不过 v8 这块一些比较老的 commit 可能依赖的还是 python2.7，而且哪怕你的发行版上安装了 python2，你的默认全局 python 依然是 python3，这就很难受了，这里提供一些解决措施。\n\n首先，在 `gclient sync` 这一步时，由于系统 python 指向的是 python3，所以可能会报错类似下面这样：\n\n```\nError: Command 'python v8/build/linux/sysroot_scripts/install-sysroot.py --arch=x86' returned non-zero exit status 1 in /home/flower/CTFhub/Tools/Pwn\nFile \"/home/flower/CTFhub/Tools/Pwn/v8/build/linux/sysroot_scripts/install-sysroot.py\", line 79\nprint GetSysrootDict(DEFAULT_TARGET_PLATFORM,\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?\n```\n\n\n我自己使用的解决方法有两个，一个是使用 pyenv 切换到 Python2.7，另一个办法是临时在当前 shell 中 `export PYTHON=python2`。\n\n其次在 `tools/dev/v8gen.py x64.debug` 这里，第一次跑可能能需要安装 sysroot，这个报错信息里有：\n\n```\n$ tools/dev/v8gen.py x64.debug -vv\n################################################################################\n/usr/bin/python2 -u tools/mb/mb.py gen -f infra/mb/mb_config.pyl -m developer_default -b x64.debug out.gn/x64.debug\n\nWriting \"\"\"\\\nis_debug = true\ntarget_cpu = \"x64\"\nv8_enable_backtrace = true\nv8_enable_slow_dchecks = true\nv8_optimized_debug = false\n\"\"\" to /home/flower/CTFhub/Tools/Pwn/v8/out.gn/x64.debug/args.gn.\n\n/home/flower/CTFhub/Tools/Pwn/v8/buildtools/linux64/gn gen out.gn/x64.debug --check\n-> returned 1\nERROR at //build/config/compiler/BUILD.gn:1138:22: Script returned non-zero exit code.\nclang_revision = exec_script(\"//tools/clang/scripts/update.py\",\n^----------\nCurrent dir: /home/flower/CTFhub/Tools/Pwn/v8/out.gn/x64.debug/\nCommand: python /home/flower/CTFhub/Tools/Pwn/v8/tools/clang/scripts/update.py --print-revision --verify-version=9.0.0\nReturned 1.\nstderr:\n\nTraceback (most recent call last):\nFile \"/home/flower/CTFhub/Tools/Pwn/v8/tools/clang/scripts/update.py\", line 16, in <module>\nimport pipes\nModuleNotFoundError: No module named 'pipes'\n\nSee //BUILD.gn:260:5: which caused the file to be included.\n\"//build/config/compiler:wexit_time_destructors\",\n^-----------------------------------------------\nGN gen failed: 1\nTraceback (most recent call last):\nFile \"tools/dev/v8gen.py\", line 307, in <module>\nsys.exit(gen.main())\nFile \"tools/dev/v8gen.py\", line 301, in main\nreturn self._options.func()\nFile \"tools/dev/v8gen.py\", line 169, in cmd_gen\ngn_outdir,\nFile \"tools/dev/v8gen.py\", line 211, in _call_cmd\nstderr=subprocess.STDOUT,\nFile \"/usr/lib/python2.7/subprocess.py\", line 223, in check_output\nraise CalledProcessError(retcode, cmd, output=output)\nsubprocess.CalledProcessError: Command '['/usr/bin/python2', '-u', 'tools/mb/mb.py', 'gen', '-f', 'infra/mb/mb_config.pyl', '-m', 'developer_default', '-b', 'x64.debug', 'out.gn/x64.debug']' returned non-zero exit status 1\n```\n\n然后对于找不到 `pipes` 这个模块，显然是因为系统使用了 python3 运行这个脚本，所以这里修改脚本的 bang 为 `#!/usr/bin/env python2` 就可以了，也可以 `export PYTHON=python2`\n\n最后，`ninja -C out.gn/x64.debug` 编译时，可能会遇到\n\n```\n../../src/base/macros.h:246:7: error: builtin __has_trivial_copy is deprecated; use __is_trivially_copyable instead [-Werror,-Wdeprecated-builtins]\n246 |       __has_trivial_copy(T) && __has_trivial_destructor(T);\n|       ^\n../../src/base/macros.h:246:32: error: builtin __has_trivial_destructor is deprecated; use __is_trivially_destructible instead [-Werror,-Wdeprecated-builtins]\n246 |       __has_trivial_copy(T) && __has_trivial_destructor(T);\n```\n\n这种报错，也很简单，修改一下 `out.gn/x64.debug/args.gn` 的配置即可：\n\n```gn\nextra_cflags = [ \"-Wno-deprecated-builtins\" ]\ntreat_warnings_as_errors = false\n```\n\n这样就不会把 warnings 当成 errors 导致编译失败啦。\n",
        "modified": "20250803100618978",
        "modifier": "LittFlower"
    }
]